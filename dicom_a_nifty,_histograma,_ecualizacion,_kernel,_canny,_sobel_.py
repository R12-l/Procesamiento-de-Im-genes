# -*- coding: utf-8 -*-
"""dicom a nifty, histograma, ecualizacion, kernel, canny, sobel  .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AfpDzNwHHxw9zdbxHUxWxLPmqO30od4A
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/

!pip install pydicom

!pip install dicom2nifti

#Importar librerias especificas
import dicom2nifti
from pathlib import Path
import nibabel as nib
#Importar librerias especificas
import dicom2nifti
from pathlib import Path
import nibabel as nib
import matplotlib.pyplot as plt
import pydicom
from pydicom import dcmread

dicom_file = dcmread("/content/drive/MyDrive/ID_0020_AGE_0066_CONTRAST_1_CT.dcm")

dicom_file[0x0028,0x0010]

dicom_file.Rows

ct = dicom_file.pixel_array
plt.figure()
plt.imshow(ct)
plt.show()

plt.figure()
plt.imshow(ct, cmap='bone')
plt.show()

plt.figure()
plt.hist(ct.ravel(), bins=256, color="gray")
plt.title('Histogram of Pixel Intensities Original Image')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')
plt.xlim([0, 2000])
plt.ylim([0, 10000])
plt.show()

#Ecualizacion del histograma
from skimage import exposure
ct_ecualized = exposure.equalize_hist(ct)

plt.figure()
plt.imshow(ct_ecualized, cmap='bone')
plt.title('Ecualized Image')
plt.axis('off')
plt.show()

plt.figure()
plt.hist(ct_ecualized.ravel(), bins=256, color="gray")
plt.title('Histogram of Pixel Intensities Original Image')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')

plt.show()

from scipy.signal import convolve2d
import numpy as np
import cv2

edge_kernel = np.array([[-1, -1, -1],
                        [-1, 8, -1],
                        [-1, -1, -1]])

convoled_image = convolve2d(ct, edge_kernel, mode='same')

plt.figure()
plt.imshow(convoled_image, cmap='bone')
plt.title('2D convolution- Edge Detection')
plt.axis('off')
plt.show()

# Ajuste de Keernel

edge_kernel_ajusted = np.array([[-2, -2, -2],
                        [-2, 16, -2],
                        [-2, -2, -2]])

convoled_image_2=convolve2d(ct, edge_kernel_ajusted, mode='same')

plt.figure()
plt.imshow(convoled_image, cmap="bone")
plt.title('20 Convolution Edge Detection Ajusted')
plt.axis('off')
plt.show()
plt.show()

convoled_image_cv=cv2.filter2D(ct, -1, edge_kernel)

plt.subplot(1, 2, 1)
plt.imshow(ct, cmap = 'bone')
plt.title('Original Image')
plt.axis('off')
plt.subplot(1, 2, 2)
plt.imshow(convoled_image, cmap = "bone")
plt.title('20 CONV-Edge Detection')
plt.axis('off')
plt.subplot(1, 2, 1)

#Filtro de media
mean_filter_cv2 = cv2.blur(ct, (5, 5))

plt.subplot(1, 2, 1)
plt.imshow(ct, cmap='bone')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(mean_filter_cv2, cmap='bone')
plt.title('Mean Filter')
plt.axis('off')
plt.show()

# Filtro mediana
median_filter_cv2 = cv2.medianBlur(ct, 5)

plt.subplot(1, 2, 1)
plt.imshow(ct, cmap='bone')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(median_filter_cv2, cmap='bone')
plt.title('Mean Filter')
plt.axis('off')
plt.show()

#Convertir la imagen a unit 8
ct_image_unit8 =(ct/ct.max()*255).astype(np.uint8)


#Filtro cany
canny_filter = cv2.Canny(ct_image_unit8, 50, 150)

plt.subplot(1, 2, 1)
plt.imshow(ct, cmap='bone')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(canny_filter, cmap='bone')
plt.title('Cany Filter')
plt.axis('off')
plt.show()

#Filtro de Sobel

sobelx = cv2.Sobel(ct, cv2.CV_64F, 1, 0, ksize=5)
sobely = cv2.Sobel(ct, cv2.CV_64F, 0, 1, ksize=5)
sobel_combined = cv2.magnitude(sobelx, sobely)

plt.subplot(1, 2, 1)
plt.imshow(ct, cmap='bone')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(sobel_combined, cmap='bone')
plt.title('Sobel Filter')
plt.axis('off')
plt.show()