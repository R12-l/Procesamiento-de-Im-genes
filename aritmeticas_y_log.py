# -*- coding: utf-8 -*-
"""aritmeticas y log.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13QwhNh_1U3tD7c5U7XRVkuszrEVDx2W9
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive

import numpy as np
import matplotlib.pyplot as plt
import cv2

#realizar la suma
imagen1=cv2.imread('lena.tif',0) #el 0 lee la iamgen en monocromatico

print(type(imagen1))
print("")
print(imagen1.dtype)
print("")
print(imagen1.shape)

plt.imshow(imagen1,cmap='gray')
plt.show()

print(imagen1)

#podemos suamr escalar o imagen con imagen
#crearemos una iamgene scalar con el msimo tamaño de la iamgen 1
scalar=np.ones(imagen1.shape, dtype='uint8')*150 #crea una matriz array en 1
print(scalar)

add_imagen1=cv2.add(imagen1,scalar)

plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.imshow(imagen1, cmap = 'gray')
plt.title("Imagen Original")
plt.subplot(1,2,2)
plt.imshow(add_imagen1, cmap = 'gray')
plt.title("Imagen - Suma")
plt.show()

sub_imagen1=cv2.subtract(imagen1,scalar)

plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.imshow(imagen1, cmap = 'gray')
plt.title("Imagen Original")
plt.subplot(1,2,2)
plt.imshow(sub_imagen1, cmap = 'gray')
plt.title("Imagen - resta")
plt.show()

#multiplicacion
mul_imagen1=cv2.multiply(imagen1,4)

plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.imshow(imagen1, cmap = 'gray')
plt.title("Imagen Original")
plt.subplot(1,2,2)
plt.imshow(mul_imagen1, cmap = 'gray')
plt.title("Imagen - multiplicaciòn")
plt.show()

#division
div_imagen1=cv2.divide(imagen1,20) #cada pixel de la iamgen se divide entre 20

plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.imshow(imagen1, cmap = 'gray')
plt.title("Imagen Original")
plt.subplot(1,2,2)
plt.imshow(div_imagen1, cmap = 'gray')
plt.title("Imagen - division")
plt.show()

#operaciones logicas
X1=cv2.imread('X1.png',0)

print(type(X1))
print("")
print(X1.dtype)
print("")
print(X1.shape)

X1=cv2.resize(X1,(512,512))
print(X1.shape)

plt.imshow(X1,cmap='gray')
plt.title("$X_1$")
plt.show()

X2=cv2.imread('X2.png',0)
X2=cv2.resize(X2,(512,512))
print(X2.shape)

plt.imshow(X2,cmap='gray')
plt.title("$X_2$")
plt.show()

#logica AND
and_image=cv2.bitwise_and(X1,X2)

plt.figure(figsize=(12,6))
plt.subplot(1,3,1)
plt.imshow(X1, cmap = 'gray')
plt.title("$X_1$")
plt.subplot(1,3,2)
plt.imshow(X2, cmap = 'gray')
plt.title("$X_2$")
plt.subplot(1,3,3)
plt.imshow(and_image, cmap = 'gray')
plt.title("$X_1$ AND $X_2$")
plt.show

#logical or
or_image=cv2.bitwise_or(X1,X2)

plt.figure(figsize=(12,6))
plt.subplot(1,3,1)
plt.imshow(X1, cmap = 'gray')
plt.title("$X_1$")
plt.subplot(1,3,2)
plt.imshow(X2, cmap = 'gray')
plt.title("$X_2$")
plt.subplot(1,3,3)
plt.imshow(or_image, cmap = 'gray')
plt.title("$X_1$ OR $X_2$")
plt.show

#logical XPR
xor_image=cv2.bitwise_xor(X1,X2)

plt.figure(figsize=(12,6))
plt.subplot(1,3,1)
plt.imshow(X1, cmap = 'gray')
plt.title("$X_1$")
plt.subplot(1,3,2)
plt.imshow(X2, cmap = 'gray')
plt.title("$X_2$")
plt.subplot(1,3,3)
plt.imshow(xor_image, cmap = 'gray')
plt.title("$X_1$ XOR $X_2$")
plt.show

#logical not
not_X1=cv2.bitwise_not(X1)
plt.figure(figsize=(12,6))
plt.subplot(1,3,1)
plt.imshow(X1, cmap = 'gray')
plt.title("$X_1$")
plt.subplot(1,3,3)
plt.imshow(not_X1, cmap = 'gray')
plt.title("$X_1$ NOT $X_2$")
plt.show