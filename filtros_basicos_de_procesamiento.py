# -*- coding: utf-8 -*-
"""filtros basicos de procesamiento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10tyV17z-ZZR8fpgUSdwUt1DiAQ8CRRPx
"""

import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/

imgc = plt.imread('catri.jpg')
print(type(imgc)) #tipo de dato
print(" ")
print(imgc.shape) #pixel x pixel y dimensiones
print(" ")
print(imgc.ndim) #num de dimensiones o clases
print(" ")
print(imgc.size) #tamaño de la imagen
print(" ")
print(imgc.dtype) #formato de imagen correspondiente a la clase
print(" ")
print(np.max(imgc)) #pixeles maximos usados
print(" ")
print(np.min(imgc)) #pixeles minimos usados
plt.imshow(imgc) #muestreo de la imagen
imgc=imgc.astype(np.float32)/255
print(imgc)

"""#*comparar componentes catrina*

"""

plt.imshow(imgc)
print(imgc.shape)

#Canal rojo
plt.imshow(imgc[:,:,0],  cmap='gray') #cambiamos la imagen a escala de grises

#Canal verde
plt.imshow(imgc[:,:,1],  cmap='gray')

#Canal azul
plt.imshow(imgc[:,:,2],  cmap='gray')

#DIFERENCIA ENTRE CANALES
diff = imgc[:,:,1] - imgc[:,:,2]
plt.title('Canal verde - Canal azul')
plt.imshow(diff, cmap='gray')

"""RESUMEN CONGTARSTE CATRINA
en la imagen podemos ver tiene 3 canales
en el contraste verde  visualizamos la iamgen un tanto mas nitida y sobreexpone en zonas donde la iamgen orignal tiende a tener àrea predominante
en el contraste rojo en la imagen de subexpone
y al contrarestar el contarste del canal verde y azul la imagen resalta delimitaciones del objeto mientras que el verde crea una zona de contraste.
"""

# imagen color 2
imgc2 = plt.imread('van.jpg') # carga la imagen y la almacena en la variable
print(type(imgc2)) #tipo de dato array en np
print(" ")
print(imgc2.shape) #Muestra las dimensiones de la imagen en forma de una tupla (alto, ancho, canales de color).
print(" ")
print(imgc2.ndim) # Imprime el número de dimensiones del array. Para una imagen en color, debería ser 3 (alto, ancho, canales).
print(" ")
print(imgc2.size) #Muestra el número total de elementos en el array, que es el producto de las dimensiones.
print(" ")
print(imgc2.dtype) #Imprime el tipo de datos de los elementos en el array, como uint8 para imágenes de 8 bits por canal.
print(" ")
print(np.max(imgc2)) #pixeles maximos usados
print(" ")
print(np.min(imgc2)) #pixeles minimos usados
plt.imshow(imgc2) #Muestra la imagen en una ventana.
imgc2=imgc2.astype(np.float32)/255 #Convierte los valores de píxeles a tipo float32 y los normaliza entre 0 y 1, lo cual es útil para algunos algoritmos de procesamiento de imágenes.
print(imgc2) #Imprime los valores de los píxeles de la imagen.

plt.imshow(imgc2) # alto, ancho y num de canales
print(imgc2.shape)# muestra la imagen

#Canal rojo
plt.imshow(imgc2[:,:,0],  cmap='gray') #cambiamos la imagen a escala de grises

#Canal verde
plt.imshow(imgc2[:,:,1],  cmap='gray')

#Canal azul
plt.imshow(imgc2[:,:,2],  cmap='gray')

#DIFERENCIA ENTRE CANALES
diff = imgc2[:,:,1] - imgc2[:,:,2]
plt.title('Canal verde - Canal azul')
plt.imshow(diff, cmap='gray')

"""RESUMEN DE CONTARSTE
Muestra la imagen resultante donde el canal verde es mayor que el azul aparecerán más claros, mientras que los negativos donde el azul es mayor que el verde aparecerán más oscuros.
"""

#imagen color 3
imgc3 = plt.imread('gir.jpg') # carga la imagen y la almacena en la variable
print(type(imgc3)) #tipo de dato array en np
print(" ")
print(imgc3.shape) #Muestra las dimensiones de la imagen en forma de una tupla (alto, ancho, canales de color).
print(" ")
print(imgc3.ndim) # Imprime el número de dimensiones del array. Para una imagen en color, debería ser 3 (alto, ancho, canales).
print(" ")
print(imgc3.size) #Muestra el número total de elementos en el array, que es el producto de las dimensiones.
print(" ")
print(imgc3.dtype) #Imprime el tipo de datos de los elementos en el array, como uint8 para imágenes de 8 bits por canal.
print(" ")
print(np.max(imgc3)) #pixeles maximos usados
print(" ")
print(np.min(imgc3)) #pixeles minimos usados
plt.imshow(imgc3) #Muestra la imagen en una ventana.
img3=imgc3.astype(np.float32)/255 #Convierte los valores de píxeles a tipo float32 y los normaliza entre 0 y 1, lo cual es útil para algunos algoritmos de procesamiento de imágenes.
print(imgc3) #Imprime los valores de los píxeles de la imagen.

plt.imshow(imgc3) # alto, ancho y num de canales
print(imgc3.shape)# muestra la imagen

#Canal rojo
plt.imshow(imgc3[:,:,0],  cmap='gray') #cambiamos la imagen a escala de grises

#Canal verde
plt.imshow(imgc3[:,:,1],  cmap='gray')

#Canal azul
plt.imshow(imgc3[:,:,2],  cmap='gray')

#DIFERENCIA ENTRE CANALES
diff = imgc3[:,:,0] - imgc3[:,:,2]
plt.title('Canal rojo - Canal azul')
plt.imshow(diff, cmap='gray')

#DIFERENCIA ENTRE CANALES
diff = imgc3[:,:,1] - imgc3[:,:,2]
plt.title('Canal verde - Canal azul')
plt.imshow(diff, cmap='gray')

"""#*IMAGENES EN ESCALA DE GTRISES *"""

imgG = plt.imread('g1.jpg') # carga la imagen y la almacena en la variable
print(type(imgG)) #tipo de dato array en np
print(" ")
print(imgG.shape) #Muestra las dimensiones de la imagen en forma de una tupla (alto, ancho, canales de color).
print(" ")
print(imgG.ndim) # Imprime el número de dimensiones del array. Para una imagen en color, debería ser 3 (alto, ancho, canales).
print(" ")
print(imgG.size) #Muestra el número total de elementos en el array, que es el producto de las dimensiones.
print(" ")
print(imgG.dtype) #Imprime el tipo de datos de los elementos en el array, como uint8 para imágenes de 8 bits por canal.
print(" ")
print(np.max(imgG)) #pixeles maximos usados
print(" ")
print(np.min(imgG)) #pixeles minimos usados
plt.imshow(imgG) #Muestra la imagen en una ventana.
img3=imgG.astype(np.float32)/255 #Convierte los valores de píxeles a tipo float32 y los normaliza entre 0 y 1, lo cual es útil para algunos algoritmos de procesamiento de imágenes.
print(imgG) #Imprime los valores de los píxeles de la imagen.

imgG2 = plt.imread('g2.jpg') # carga la imagen y la almacena en la variable
print(type(imgG2)) #tipo de dato array en np
print(" ")
print(imgG2.shape) #Muestra las dimensiones de la imagen en forma de una tupla (alto, ancho, canales de color).
print(" ")
print(imgG2.ndim) # Imprime el número de dimensiones del array. Para una imagen en color, debería ser 3 (alto, ancho, canales).
print(" ")
print(imgG2.size) #Muestra el número total de elementos en el array, que es el producto de las dimensiones.
print(" ")
print(imgG2.dtype) #Imprime el tipo de datos de los elementos en el array, como uint8 para imágenes de 8 bits por canal.
print(" ")
print(np.max(imgG2)) #pixeles maximos usados
print(" ")
print(np.min(imgG2)) #pixeles minimos usados
plt.imshow(imgG2) #Muestra la imagen en una ventana.
img3=imgG2.astype(np.float32)/255 #Convierte los valores de píxeles a tipo float32 y los normaliza entre 0 y 1, lo cual es útil para algunos algoritmos de procesamiento de imágenes.
print(imgG2) #Imprime los valores de los píxeles de la imagen.

imgG3 = plt.imread('g3.jpg') # carga la imagen y la almacena en la variable
print(type(imgG3)) #tipo de dato array en np
print(" ")
print(imgG3.shape) #Muestra las dimensiones de la imagen en forma de una tupla (alto, ancho, canales de color).
print(" ")
print(imgG3.ndim) # Imprime el número de dimensiones del array. Para una imagen en color, debería ser 3 (alto, ancho, canales).
print(" ")
print(imgG3.size) #Muestra el número total de elementos en el array, que es el producto de las dimensiones.
print(" ")
print(imgG3.dtype) #Imprime el tipo de datos de los elementos en el array, como uint8 para imágenes de 8 bits por canal.
print(" ")
print(np.max(imgG3)) #pixeles maximos usados
print(" ")
print(np.min(imgG3)) #pixeles minimos usados
plt.imshow(imgG3) #Muestra la imagen en una ventana.
img3=imgG3.astype(np.float32)/255 #Convierte los valores de píxeles a tipo float32 y los normaliza entre 0 y 1, lo cual es útil para algunos algoritmos de procesamiento de imágenes.
print(imgG3) #Imprime los valores de los píxeles de la imagen.